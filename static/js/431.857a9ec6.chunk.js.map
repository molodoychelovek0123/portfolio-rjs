{"version":3,"file":"static/js/431.857a9ec6.chunk.js","mappings":"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","sources":["components/Projects/ProjectItem.js","components/Projects/Projects.js"],"sourcesContent":["// Карточка проекта\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport handleViewport from 'react-in-viewport';\n\nclass ProjectItemBlock extends React.Component {\n\n  static propTypes = {\n    name: PropTypes.string,\n    url: PropTypes.string,\n    image: PropTypes.string.isRequired,\n  };\n  baseClasses = ['project-item', 'card']\n  getClasses() {\n    const {inViewport} = this.props;\n    if (inViewport) { // Если проект во вью порте\n      return this.baseClasses.concat(['active']);\n    } else {\n      return this.baseClasses;\n    }\n  }\n\n  render() {\n      return (\n      <React.Fragment>\n          <li className={this.getClasses().join(\" \")}>\n            <a href={this.props.url}>\n              <div className=\"card__overlay\">\n                <div className=\"card__text\">\n                  <h4>{this.props.name}</h4>\n                </div>\n              </div>\n\n              <div className=\"card__image\">\n                <img src={this.props.image} alt={this.props.name} className=\"responsive-img\" />\n              </div>\n            </a>\n          </li>\n      </React.Fragment>\n    );\n  }\n}\n\nconst ProjectItem = handleViewport(ProjectItemBlock)\n\nexport default ProjectItem;","// Блок проекты\n\nimport React from 'react'\nimport config from \"../../AppConfig\";\nimport ProjectItem from \"./ProjectItem\";\n\nexport default class Projects extends React.Component {\n    projects = [];\n    state = {loaded: false}\n\n    constructor(props) {\n        super(props);\n        this.state={loaded: false} // По стандарту состояния лоадеда не загружено\n\n    }\n    componentDidMount() { // Вызов функции после монтирования в DOM\n        if(!this.state.loaded) // Проверка загружены ли проекты, чтобы не загружать их постоянно\n        fetch('projects.json').then(response => response.json()).then(data => {this.projects = data;this.setState({loaded: true})}); // Загружаем и выставляем другое состояние лоадеда\n    }\n    componentDidUpdate() { // Вызов функции после обновления компонента\n        if(!this.state.loaded) // Проверка загружены ли проекты, чтобы не загружать их постоянно\n        fetch('projects.json').then(response => response.json()).then(data => {this.projects = data;this.setState({loaded: true})}); // Загружаем и выставляем другое состояние лоадеда\n    }\n    render() {\n        return (\n            <section className=\"projects\" id=\"projects\">\n                <div className=\"container\">\n                    <h3>{config.name} / projects</h3>\n                    {this.state.loaded ? // Если мы грузанули проекты\n                        (\n                            <ul className=\"projects-wrapper\">\n                                {this.projects.map((project, index) => {\n                                    return <ProjectItem name={project.name} url={project.url} image={project.image}\n                                                        key={index}/>\n                                })}\n                            </ul>\n                        )\n                        :\n                        (\n                            <div> Loading... </div>\n                        )\n                    }\n\n                </div>\n            </section>\n        )\n    }\n}"],"names":["ProjectItemBlock","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","baseClasses","_createClass","key","value","this","props","inViewport","_jsx","React","children","className","getClasses","join","_jsxs","href","url","name","src","image","alt","handleViewport","Projects","projects","state","loaded","_this2","fetch","then","response","json","data","setState","_this3","id","config","map","project","index","ProjectItem"],"sourceRoot":""}