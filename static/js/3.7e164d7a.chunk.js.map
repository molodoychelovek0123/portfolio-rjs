{"version":3,"sources":["components/Projects/ProjectItem.js","components/Projects/Projects.js"],"names":["ProjectItemBlock","React","Component","constructor","arguments","baseClasses","getClasses","inViewport","this","props","concat","render","_jsx","Fragment","children","className","join","_jsxs","href","url","name","src","image","alt","ProjectItem","handleViewport","Projects","super","projects","state","loaded","componentDidMount","fetch","then","response","json","data","setState","componentDidUpdate","id","config","map","project","index"],"mappings":"6NAMA,MAAMA,UAAyBC,IAAMC,UAAUC,cAAA,SAAAC,WAAA,KAO7CC,YAAc,CAAC,eAAgB,OAAO,CACtCC,aACE,MAAM,WAACC,GAAcC,KAAKC,MAC1B,OAAIF,EACKC,KAAKH,YAAYK,OAAO,CAAC,WAEzBF,KAAKH,WAEhB,CAEAM,SACI,OACAC,cAACX,IAAMY,SAAQ,CAAAC,SACXF,cAAA,MAAIG,UAAWP,KAAKF,aAAaU,KAAK,KAAKF,SACzCG,eAAA,KAAGC,KAAMV,KAAKC,MAAMU,IAAIL,SAAA,CACtBF,cAAA,OAAKG,UAAU,gBAAeD,SAC5BF,cAAA,OAAKG,UAAU,aAAYD,SACzBF,cAAA,MAAAE,SAAKN,KAAKC,MAAMW,WAIpBR,cAAA,OAAKG,UAAU,cAAaD,SAC1BF,cAAA,OAAKS,IAAKb,KAAKC,MAAMa,MAAOC,IAAKf,KAAKC,MAAMW,KAAML,UAAU,2BAM1E,EAKaS,MAFKC,IAAezB,GCtCpB,MAAM0B,UAAiBzB,IAAMC,UAIxCC,YAAYM,GACRkB,MAAMlB,GAAO,KAJjBmB,SAAW,GAAG,KACdC,MAAQ,CAACC,QAAQ,GAIbtB,KAAKqB,MAAM,CAACC,QAAQ,EAExB,CACAC,oBACQvB,KAAKqB,MAAMC,QACfE,MAAM,iBAAiBC,MAAKC,GAAYA,EAASC,SAAQF,MAAKG,IAAS5B,KAAKoB,SAAWQ,EAAK5B,KAAK6B,SAAS,CAACP,QAAQ,GAAM,GAC7H,CACAQ,qBACQ9B,KAAKqB,MAAMC,QACfE,MAAM,iBAAiBC,MAAKC,GAAYA,EAASC,SAAQF,MAAKG,IAAS5B,KAAKoB,SAAWQ,EAAK5B,KAAK6B,SAAS,CAACP,QAAQ,GAAM,GAC7H,CACAnB,SACI,OACIC,cAAA,WAASG,UAAU,WAAWwB,GAAG,WAAUzB,SACvCG,eAAA,OAAKF,UAAU,YAAWD,SAAA,CACtBG,eAAA,MAAAH,SAAA,CAAK0B,IAAOpB,KAAK,iBAChBZ,KAAKqB,MAAMC,OAEJlB,cAAA,MAAIG,UAAU,mBAAkBD,SAC3BN,KAAKoB,SAASa,KAAI,CAACC,EAASC,IAClB/B,cAACY,EAAW,CAACJ,KAAMsB,EAAQtB,KAAMD,IAAKuB,EAAQvB,IAAKG,MAAOoB,EAAQpB,OAChDqB,OAMjC/B,cAAA,OAAAE,SAAK,qBAO7B,E","file":"static/js/3.7e164d7a.chunk.js","sourcesContent":["// Карточка проекта\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport handleViewport from 'react-in-viewport';\n\nclass ProjectItemBlock extends React.Component {\n\n  static propTypes = {\n    name: PropTypes.string,\n    url: PropTypes.string,\n    image: PropTypes.string.isRequired,\n  };\n  baseClasses = ['project-item', 'card']\n  getClasses() {\n    const {inViewport} = this.props;\n    if (inViewport) { // Если проект во вью порте\n      return this.baseClasses.concat(['active']);\n    } else {\n      return this.baseClasses;\n    }\n  }\n\n  render() {\n      return (\n      <React.Fragment>\n          <li className={this.getClasses().join(\" \")}>\n            <a href={this.props.url}>\n              <div className=\"card__overlay\">\n                <div className=\"card__text\">\n                  <h4>{this.props.name}</h4>\n                </div>\n              </div>\n\n              <div className=\"card__image\">\n                <img src={this.props.image} alt={this.props.name} className=\"responsive-img\" />\n              </div>\n            </a>\n          </li>\n      </React.Fragment>\n    );\n  }\n}\n\nconst ProjectItem = handleViewport(ProjectItemBlock)\n\nexport default ProjectItem;","// Блок проекты\n\nimport React from 'react'\nimport config from \"../../AppConfig\";\nimport ProjectItem from \"./ProjectItem\";\n\nexport default class Projects extends React.Component {\n    projects = [];\n    state = {loaded: false}\n\n    constructor(props) {\n        super(props);\n        this.state={loaded: false} // По стандарту состояния лоадеда не загружено\n\n    }\n    componentDidMount() { // Вызов функции после монтирования в DOM\n        if(!this.state.loaded) // Проверка загружены ли проекты, чтобы не загружать их постоянно\n        fetch('projects.json').then(response => response.json()).then(data => {this.projects = data;this.setState({loaded: true})}); // Загружаем и выставляем другое состояние лоадеда\n    }\n    componentDidUpdate() { // Вызов функции после обновления компонента\n        if(!this.state.loaded) // Проверка загружены ли проекты, чтобы не загружать их постоянно\n        fetch('projects.json').then(response => response.json()).then(data => {this.projects = data;this.setState({loaded: true})}); // Загружаем и выставляем другое состояние лоадеда\n    }\n    render() {\n        return (\n            <section className=\"projects\" id=\"projects\">\n                <div className=\"container\">\n                    <h3>{config.name} / projects</h3>\n                    {this.state.loaded ? // Если мы грузанули проекты\n                        (\n                            <ul className=\"projects-wrapper\">\n                                {this.projects.map((project, index) => {\n                                    return <ProjectItem name={project.name} url={project.url} image={project.image}\n                                                        key={index}/>\n                                })}\n                            </ul>\n                        )\n                        :\n                        (\n                            <div> Loading... </div>\n                        )\n                    }\n\n                </div>\n            </section>\n        )\n    }\n}"],"sourceRoot":""}